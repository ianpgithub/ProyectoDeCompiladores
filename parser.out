Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSE
    EQUAL
    GREATERTHAN
    IF
    LBRACKET
    OR
    RBRACKET
    SMALLERTHAN
    THEN
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON ENDL VARS define_vars define_function
Rule 2     define_vars -> type COLON vars SEMICOLON define_vars
Rule 3     define_vars -> empty
Rule 4     type -> INT
Rule 5     type -> FLOAT
Rule 6     vars -> ID COMMA vars
Rule 7     vars -> ID
Rule 8     define_function -> FUNCTION type ID parameters ENDL VARS define_vars LBRACE RBRACE
Rule 9     parameters -> LPAREN type COLON vars RPAREN
Rule 10    expression -> term PLUS term
Rule 11    expression -> term MINUS term
Rule 12    expression -> term
Rule 13    term -> factor TIMES factor
Rule 14    term -> factor DIVIDE factor
Rule 15    term -> factor
Rule 16    factor -> NUMBER
Rule 17    factor -> ID
Rule 18    factor -> PLUS factor
Rule 19    factor -> MINUS factor
Rule 20    factor -> LPAREN expression RPAREN
Rule 21    empty -> <empty>

Terminals, with rules where they appear

COLON                : 2 9
COMMA                : 6
DIVIDE               : 14
ELSE                 : 
ENDL                 : 1 8
EQUAL                : 
FLOAT                : 5
FUNCTION             : 8
GREATERTHAN          : 
ID                   : 1 6 7 8 17
IF                   : 
INT                  : 4
LBRACE               : 8
LBRACKET             : 
LPAREN               : 9 20
MINUS                : 11 19
NUMBER               : 16
OR                   : 
PLUS                 : 10 18
PROGRAM              : 1
RBRACE               : 8
RBRACKET             : 
RPAREN               : 9 20
SEMICOLON            : 1 2
SMALLERTHAN          : 
THEN                 : 
TIMES                : 13
VARS                 : 1 8
WHILE                : 
error                : 

Nonterminals, with rules where they appear

define_function      : 1
define_vars          : 1 2 8
empty                : 3
expression           : 20
factor               : 13 13 14 14 15 18 19
parameters           : 8
program              : 0
term                 : 10 10 11 11 12
type                 : 2 8 9
vars                 : 2 6 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON ENDL VARS define_vars define_function

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON ENDL VARS define_vars define_function

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON ENDL VARS define_vars define_function

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . ENDL VARS define_vars define_function

    ENDL            shift and go to state 5


state 5

    (1) program -> PROGRAM ID SEMICOLON ENDL . VARS define_vars define_function

    VARS            shift and go to state 6


state 6

    (1) program -> PROGRAM ID SEMICOLON ENDL VARS . define_vars define_function
    (2) define_vars -> . type COLON vars SEMICOLON define_vars
    (3) define_vars -> . empty
    (4) type -> . INT
    (5) type -> . FLOAT
    (21) empty -> .

    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    FUNCTION        reduce using rule 21 (empty -> .)

    define_vars                    shift and go to state 7
    type                           shift and go to state 8
    empty                          shift and go to state 9

state 7

    (1) program -> PROGRAM ID SEMICOLON ENDL VARS define_vars . define_function
    (8) define_function -> . FUNCTION type ID parameters ENDL VARS define_vars LBRACE RBRACE

    FUNCTION        shift and go to state 13

    define_function                shift and go to state 12

state 8

    (2) define_vars -> type . COLON vars SEMICOLON define_vars

    COLON           shift and go to state 14


state 9

    (3) define_vars -> empty .

    FUNCTION        reduce using rule 3 (define_vars -> empty .)
    LBRACE          reduce using rule 3 (define_vars -> empty .)


state 10

    (4) type -> INT .

    COLON           reduce using rule 4 (type -> INT .)
    ID              reduce using rule 4 (type -> INT .)


state 11

    (5) type -> FLOAT .

    COLON           reduce using rule 5 (type -> FLOAT .)
    ID              reduce using rule 5 (type -> FLOAT .)


state 12

    (1) program -> PROGRAM ID SEMICOLON ENDL VARS define_vars define_function .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON ENDL VARS define_vars define_function .)


state 13

    (8) define_function -> FUNCTION . type ID parameters ENDL VARS define_vars LBRACE RBRACE
    (4) type -> . INT
    (5) type -> . FLOAT

    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    type                           shift and go to state 15

state 14

    (2) define_vars -> type COLON . vars SEMICOLON define_vars
    (6) vars -> . ID COMMA vars
    (7) vars -> . ID

    ID              shift and go to state 17

    vars                           shift and go to state 16

state 15

    (8) define_function -> FUNCTION type . ID parameters ENDL VARS define_vars LBRACE RBRACE

    ID              shift and go to state 18


state 16

    (2) define_vars -> type COLON vars . SEMICOLON define_vars

    SEMICOLON       shift and go to state 19


state 17

    (6) vars -> ID . COMMA vars
    (7) vars -> ID .

    COMMA           shift and go to state 20
    SEMICOLON       reduce using rule 7 (vars -> ID .)
    RPAREN          reduce using rule 7 (vars -> ID .)


state 18

    (8) define_function -> FUNCTION type ID . parameters ENDL VARS define_vars LBRACE RBRACE
    (9) parameters -> . LPAREN type COLON vars RPAREN

    LPAREN          shift and go to state 22

    parameters                     shift and go to state 21

state 19

    (2) define_vars -> type COLON vars SEMICOLON . define_vars
    (2) define_vars -> . type COLON vars SEMICOLON define_vars
    (3) define_vars -> . empty
    (4) type -> . INT
    (5) type -> . FLOAT
    (21) empty -> .

    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    FUNCTION        reduce using rule 21 (empty -> .)
    LBRACE          reduce using rule 21 (empty -> .)

    type                           shift and go to state 8
    define_vars                    shift and go to state 23
    empty                          shift and go to state 9

state 20

    (6) vars -> ID COMMA . vars
    (6) vars -> . ID COMMA vars
    (7) vars -> . ID

    ID              shift and go to state 17

    vars                           shift and go to state 24

state 21

    (8) define_function -> FUNCTION type ID parameters . ENDL VARS define_vars LBRACE RBRACE

    ENDL            shift and go to state 25


state 22

    (9) parameters -> LPAREN . type COLON vars RPAREN
    (4) type -> . INT
    (5) type -> . FLOAT

    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    type                           shift and go to state 26

state 23

    (2) define_vars -> type COLON vars SEMICOLON define_vars .

    FUNCTION        reduce using rule 2 (define_vars -> type COLON vars SEMICOLON define_vars .)
    LBRACE          reduce using rule 2 (define_vars -> type COLON vars SEMICOLON define_vars .)


state 24

    (6) vars -> ID COMMA vars .

    SEMICOLON       reduce using rule 6 (vars -> ID COMMA vars .)
    RPAREN          reduce using rule 6 (vars -> ID COMMA vars .)


state 25

    (8) define_function -> FUNCTION type ID parameters ENDL . VARS define_vars LBRACE RBRACE

    VARS            shift and go to state 27


state 26

    (9) parameters -> LPAREN type . COLON vars RPAREN

    COLON           shift and go to state 28


state 27

    (8) define_function -> FUNCTION type ID parameters ENDL VARS . define_vars LBRACE RBRACE
    (2) define_vars -> . type COLON vars SEMICOLON define_vars
    (3) define_vars -> . empty
    (4) type -> . INT
    (5) type -> . FLOAT
    (21) empty -> .

    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LBRACE          reduce using rule 21 (empty -> .)

    type                           shift and go to state 8
    define_vars                    shift and go to state 29
    empty                          shift and go to state 9

state 28

    (9) parameters -> LPAREN type COLON . vars RPAREN
    (6) vars -> . ID COMMA vars
    (7) vars -> . ID

    ID              shift and go to state 17

    vars                           shift and go to state 30

state 29

    (8) define_function -> FUNCTION type ID parameters ENDL VARS define_vars . LBRACE RBRACE

    LBRACE          shift and go to state 31


state 30

    (9) parameters -> LPAREN type COLON vars . RPAREN

    RPAREN          shift and go to state 32


state 31

    (8) define_function -> FUNCTION type ID parameters ENDL VARS define_vars LBRACE . RBRACE

    RBRACE          shift and go to state 33


state 32

    (9) parameters -> LPAREN type COLON vars RPAREN .

    ENDL            reduce using rule 9 (parameters -> LPAREN type COLON vars RPAREN .)


state 33

    (8) define_function -> FUNCTION type ID parameters ENDL VARS define_vars LBRACE RBRACE .

    $end            reduce using rule 8 (define_function -> FUNCTION type ID parameters ENDL VARS define_vars LBRACE RBRACE .)

